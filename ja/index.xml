<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>概要 on Regolith Desktop</title><link>https://regolith-desktop.com/ja/</link><description>Recent content in 概要 on Regolith Desktop</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://regolith-desktop.com/ja/index.xml" rel="self" type="application/rss+xml"/><item><title>i3設定のカスタマイズ</title><link>https://regolith-desktop.com/ja/docs/howtos/customize-i3-configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://regolith-desktop.com/ja/docs/howtos/customize-i3-configuration/</guid><description>Regolithの既定の動作 # 既定の設定は/usr/share/regolith/i3/config.dに保存されています。これらはアルファベット順に読み込まれます。次に、~/.config/regolith3/i3/config.dのユーザー設定がアルファベット順に読み込みまれます。Regolithの既定の設定はXresources値の設定や、ユーザー設定の追加や、aptによる既定の設定の追加・削除でカスタマイズできるように構築されています。これにより、Regolithではi3のカスタマイズ方法に、設定をクリーンにするため、個別に、もしくは組み合わせて使用できる複数のアプローチがあります。
Xresourcesによるキーバインド・文字列・プログラム名・色といった、オーバーライド値の使用 aptによるRegolithの既定ファイルを追加や削除 独自の設定ファイルの追加 Regolithの設定の大規模の置き換え Xresources変数を設定する方法 # 次の設定例（/usr/share/regolith/i3/config.d/80_compositor）より、$wm.program.compositorを設定することで、既存のi3設定ファイルを編集したりオーバーライドすることなく、使用したいコンポジターを読み込むようにカスタマイズすることができます。
Regolithバージョン3.0ではXresourceキーが&amp;quot;i3-wm&amp;quot;から&amp;quot;wm&amp;quot;に置き換えられます。このページの内容はRegolith 3.0以降のものに更新されています。それ以前のバージョンを使用する場合は、キーの名前を&amp;quot;wm&amp;quot;から&amp;quot;i3-wm&amp;quot;として使用してください。例として、Regolith 1.xと2.xではwm.foo.barはi3-wm.foo.barに変更されます。 set_from_resource $wm.program.compositor wm.program.compositor /usr/share/regolith-compositor/init exec_always --no-startup-id $wm.program.compositor これを行うには、~/.config/regolith3/Xresourcesに以下の行を追加するだけでできます。
# 自作のコンポジターを使用する wm.program.compositor: /usr/local/bin/my-compositor 同様に、/usr/share/regolith/i3/config.dのファイルを基にしたXresourcesで他のオプションのオーバーライドをすることもできます。
## 間隔の設定 wm.gaps.inner.size: 1 ## 分割線の設定 wm.window.border.size: 3 wm.client.focused.color.child_border: #AAD3E9 ## ワークスペースの名前 wm.workspace.01.name: 1:FOO 詳しくは、Xresourcesに関するより詳細なディスカッションを参照してください。
既定の部分設定をアンインストールする方法 # 提供された既定の部分設定を全体的に置き換えたり削除したい場合、提供された部分をaptでパッケージとして削除することができます。
削除したい部分設定を提供するパッケージの名前を特定するには次のコマンドを実行します。
dpkg -S /usr/share/doc/regolith-i3-workspace-config 出力結果にパッケージの名前が含まれている場合：
regolith-i3-workspace-config: /usr/share/doc/regolith-i3-workspace-config このパッケージで提供されるファイルの完全なリストを確認し、何を削除しようとしているのかわかっている場合：
dpkg -L regolith-i3-workspace-config 部分設定を削除するには：
sudo apt remove regolith-i3-workspace-config 既定の部分設定をカスタマイズする方法 # 警告：Regolithの既定部分のみをカスタマイズする場合、~/.config/regolith3/i3/configファイルが存在しないことを確認してください。これはRegolithの既定をオーバーライドするため、このハウツーの内容と互換性がありません。 初めに、ユーザーの部分設定のディレクトリが存在することを確認します。</description></item><item><title>インストール</title><link>https://regolith-desktop.com/ja/docs/using-regolith/install/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://regolith-desktop.com/ja/docs/using-regolith/install/</guid><description>Regolith 3.2を入手 # 以前のバージョンのRegolithからアップグレードする場合はリリースノート を、特に2.xからの場合は移行ガイドを参照してください。
サポートするOS # 以下は、Regolithデスクトップのインストールを取り扱っている特定のLinuxベースのOSごとに分割されています。
Ubuntu # Ubuntu 24.04 Regolithはシステムパッケージとしてインストールすることができます。これは簡単に更新や削除ができ、一貫することができます。 下記のステップでは、Regolithのパッケージリポジトリからパッケージを読み込み可能にして、デスクトップパッケージをインストールできるようにシステムを設定する方法について記しています。
ローカルのaptにRegolithの公開鍵を登録する。
wget -qO - https://regolith-desktop.org/regolith.key | \ gpg --dearmor | sudo tee /usr/share/keyrings/regolith-archive-keyring.gpg &amp;gt; /dev/null ローカルのaptにリポジトリのURLを追加する。
echo deb &amp;quot;[arch=amd64 signed-by=/usr/share/keyrings/regolith-archive-keyring.gpg] \ https://regolith-desktop.org/release-3_2-ubuntu-noble-amd64 noble main&amp;quot; | \ sudo tee /etc/apt/sources.list.d/regolith.list aptを更新してRegolithをインストールする。
sudo apt update sudo apt install regolith-desktop regolith-session-flashback regolith-look-lascaille システムを再起動する。
ログインマネージャーは新しいデスクトップセッションを識別するため、再起動が必要になります。システムの再起動はログインマネージャーを再起動するための簡単な方法です。
ARMベースのシステムにインストールするときは、上記の内容から2箇所のamd64をarm64に置き換えてください。 Ubuntu 22.</description></item><item><title>設定ファイル</title><link>https://regolith-desktop.com/ja/docs/reference/configurations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://regolith-desktop.com/ja/docs/reference/configurations/</guid><description>設定ファイルのクイックリファレンス # コンポーネント 既定の設定 ユーザー設定 注意 i3 / i3-gaps /etc/regolith/i3/config, /usr/share/regolith/i3/config.d ~/.config/regolith3/i3 ユーザー設定ディレクトリでconfig.d部分設定を作成してRegolith2の設定を 拡張 するか、configを作成して 全体にオーバーライド します。詳細 Xresources /usr/share/regolith-look/default ~/.config/regolith3/Xresources ~/.Xresourcesも読み込まれますが、他のデスクトップセッションでも必要になる可能性のあるプロパティを対象にしています。詳細 バーステータスインジケーター /usr/share/i3xrocks/conf.d/ ~/.config/regolith3/i3xrocks/conf.d 各ブロックには独自の設定ファイルがありません。ファイル名のアルファベット順に読み込まれた設定です。詳細 Picom（Compton）コンポジター /etc/regolith/picom/config ~/.config/regolith3/picom/config 詳細 警告：~/.config/regolith3/i3/configにi3の設定ファイルを追加すると、Xresourcesやlookを含むすべてのRegolithの設定がオーバーライドされます。 履歴 # 部分設定 # Regolith 2.0では、i3が4.20になったことで部分設定のサポートが追加されます。これはincludesによって行われます。このincludesのサポートにより、Regolith 2.0がパッケージマネージャーを使用して、既定の部分設定を追加もしくは削除することができます。パッケージのインストールや削除により、 i3設定を特定の設定にカスタマイズしながら、設定を変更する必要のない部分については、上流の変更を追跡できます。
/etc/regolith/i3/configにあるrootのRegolith設定ファイルは、部分設定を次のように読み込みます：
# Regolithのi3のあらゆる部分設定を読み込む include /usr/share/regolith/i3/config.d/* # ユーザーのi3の部分設定を読み込む include $HOME/.config/regolith2/i3/config.d/*</description></item><item><title>初回起動</title><link>https://regolith-desktop.com/ja/docs/using-regolith/first-launch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://regolith-desktop.com/ja/docs/using-regolith/first-launch/</guid><description>初回起動 # Regolithの既定のインターフェースは、アプリケーションの起動方法やその他の一般的なタスクの実行方法に関する視覚的なヒントがありません。これは、初めて使う人にとって少し混乱するかもしれません。しかし、Regolithのインターフェースを使っていくときは、次の2つのキーバインドを記憶しておけば、比較的簡単に利用できるようになります。
アクション キーバインド 動き キーバインドビューワー super shift ? 利用可能なキーバインドの表示・実行 アプリランチャー super space デスクトップアプリケーションの起動 Superキー # Regolithにおいて多くのキーバインドで使われるのが super キーです。このキーは&amp;quot;WIN&amp;quot;と書かれていたりMS Windowsのロゴが書かれていることがあります。MacではCommand ⌘ キーを示します。今後このキーは super と呼ばれますが、あなたの必要に応じて物理ボタンの super マップ変更できることに注意してください。
上記のキーバインドのどちらかを入力すると、フォーカスされたモニターにランチャーダイアログがポップアップで表示されます。ダイアログはどちらも共通のインターフェースを持っています。
iliaと呼ばれるプログラムによるインターフェースの上部にはテキストを入力するウィジェット、下部にリスト選択のウィジェットがあります。これらのダイアログに共通する使用パターンは、表示されたリストからアイテムを選択することです。テキストを入力して選択項目をフィルタリングし、矢印キーを使用して選択します。 enter を押すと、選択されたアイテムが実行されます。キーバインドの場合、選択したキーバインドが手動で実行されることになります。アプリの場合、選択されたアプリケーションが起動します。
キーバインドビューワー # キーバインドビューワーの目的は、Regolithのキーバインドを素早く、簡単に見つけて学ぶことです。キーバインドのリファレンスはこのサイト上でも利用可能ですが、ビューワーのほうが素早くダイアログを表示してアクションを検索して探し出すことができます。見つけたら、キーボードを使用するか、ダイアログでアイテムを選択して、キーバインドを実行することができます。
アプリケーションランチャー # デスクトップ環境の基本的なタスクは、ユーザーがアプリケーションを起動できるようにすることです。Regolithでは、アプリランチャーによっておこなわれます。キーバインドと同様、ダイアログは初めに、利用可能なデスクトップアプリケーションをすべて表示します。テキストを入力して選択項目をフィルタリングし、矢印キーを使用して特定のアイテムを選択します。 enter を押すことで選択されたアプリケーションが起動します。</description></item><item><title>基本的な使い方</title><link>https://regolith-desktop.com/ja/docs/using-regolith/basics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://regolith-desktop.com/ja/docs/using-regolith/basics/</guid><description>使い方 # アプリケーションを開く # 初回ログイン後、画面下部にバーが、ダイアログにいくつかのキーボードショートカットが表示されます。このiliaと呼ばれるダイアログは、このデスクトップ環境におけるさまざまなアクションのキーバインドを見つけるアシスタントを提供します。escキーで閉じても、 super shift ? で再度表示することができます。アプリケーションを起動するには、 super space を押すことで、同様のダイアログが、システムにインストールされたアプリケーションとともに読み込まれます。起動したいアプリケーションの名前を入力し始めると、リストが入力したものと一致するものにフィルタリングされます。矢印キーでリストをスクロールすることもできます。
ウィンドウを操作する # 実行中のアプリケーションにフォーカスするには、 super ctrl space キーバインドですべての実行中のウィンドウのダイアログを表示することができます。利用したいウィンドウを選択することで、簡単にそのウィンドウが含まれるワークスペースに移動してフォーカスを設定されます。
新しいワークスペースを作成する # ワークスペース（いくつかのデスクトップ環境では&amp;quot;仮想デスクトップ&amp;quot;として知られています）ウィンドウを管理するための主要な方法です。各ワークスペースは、独立したウィンドウセットの画面を提供しています。ワークスペースを作成したり操作するには、 super 0-9 でインデックスを指定します。
ファイルを検索して起動する # 特定のファイルをローカルのコンピューター上で検索には、さまざまな方法があります。Regolithでは、 super alt space で、素早く検索して、ファイルを既定のアプリケーションで読み込むファイル検索ダイアログを提供しています。 選択したものをEnterで入力すると、xdg-openコマンドでファイルが呼び出されます。
ターミナル # ターミナルは専用のキーバインド・ super enter を持つ特別なアプリケーションです。
ブラウザ # 既定のブラウザもまた特別であり、 super shift enter で起動することができます。
アプリケーションを閉じる # super shift q で、フォーカスしているアプリケーションを閉じます。誤作動しているアプリの場合、 super alt q でフォーカスしているアプリケーションを強制終了(kill)することができますが、保存していないデータは失われる可能性に注意してください。</description></item><item><title>設定</title><link>https://regolith-desktop.com/ja/docs/using-regolith/configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://regolith-desktop.com/ja/docs/using-regolith/configuration/</guid><description>新規ユーザーに推奨されるパッケージ # 外観 # Regolith公式の外観をすべてインストールする:
sudo apt install regolith-look-* もしくは、aptでインストールされて利用可能な外観のリストを表示する:
apt list | grep regolith-look- 注意：これはフォントやテーマ、壁紙も含みます。ディスクの使用率の最小化を望むユーザーは、使用していない外観をアンインストールすることを推奨します。
外観の選択方法の概要については、以下の項目を参照してください。
ステータスインジケーター # 次の行では、新規ユーザーに推奨されるステータスインジケータパッケージをインストールします。
sudo apt install i3xrocks-focused-window-name i3xrocks-rofication i3xrocks-info i3xrocks-app-launcher i3xrocks-memory これらのインジケーターを後から削除したいときは、システムからアンインストールします。例：
sudo apt remove i3xrocks-info ラップトップのバッテリー状態 # ラップトップの現在のバッテリー状態を表示するには：
sudo apt install i3xrocks-battery コンポジター # コンポジターはウィンドウ環境に仮想エフェクトを追加します。既定では、Regolith 3にはpicomコンポジターがインストールされています。特定のハードウェアやドライバの制限によってグラフィックの問題が発生した場合、変わりに次のコンポジターをインストールする必要があります。
パッケージ 注意 regolith-compositor-picom-glx 既定 regolith-compositor-compton-glx 古いコンポジターであり、いくつかのハードウェアでよりよく動作する場合があります regolith-compositor-xcompmgr 古いコンポジターであり、いくつかのハードウェアでよりよく動作する場合があります regolith-compositor-none パススルーパッケージであり、コンポジターは実行されません 詳細な概要は、このハウツーを参照してください。</description></item><item><title>Xresources</title><link>https://regolith-desktop.com/ja/docs/reference/xresources/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://regolith-desktop.com/ja/docs/reference/xresources/</guid><description>Regolithバージョン3.0ではXresourceキーが&amp;quot;i3-wm&amp;quot;から&amp;quot;wm&amp;quot;に置き換えられます。このページの内容はRegolith 3.0以降のものに更新されています。それ以前のバージョンを使用する場合は、キーの名前を&amp;quot;wm&amp;quot;から&amp;quot;i3-wm&amp;quot;として使用してください。例として、Regolith 1.xと2.xではwm.foo.barはi3-wm.foo.barに変更されます。 Xresourcesキー 概要 gtk.theme_name GTKテーマ gtk.icon_theme_name GTKアイコンテーマ gnome.terminal.audible-bell gnome-terminalのベルを有効にする（true / false） gtk.document_font_name GTKドキュメントのフォント名 gtk.font_name GTKアプリとデスクトップにおける一般的な用途のフォント gtk.monospace_font_name i3barやターミナルなどのモノスペースエリアのフォント gnome.terminal.background-transparency-percent gnome-terminalの背景の透過度（0 - 100）。gnome.terminal.use-transparent-backgroundも参照。 gnome.terminal.font gnome-terminalのフォント定義 gnome.terminal.scrollbar スクロールバーの有効・無効フラグ（never / always） gnome.terminal.use-transparent-background gnome-terminalの背景の透過を有効にする（true / false）。gnome.terminal.background-transparency-percentも参照。 gnome.wallpaper GNOME壁紙（設定をオーバーライド可能) gnome.wm.theme GNOMEウィンドウマネージャーのテーマ（使用されていません） wm.alt Altキーのキーマップ。i3ユーザーガイドの概要も参照。 wm.</description></item><item><title>コンポジターのカスタマイズ</title><link>https://regolith-desktop.com/ja/docs/howtos/customize-compositor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://regolith-desktop.com/ja/docs/howtos/customize-compositor/</guid><description>コンポジターをカスタマイズする方法（仮想エフェクト） # 異常な視覚的不具合やグラフィックパフォーマンスの低下を経験している場合は、 このセクションに特に注意してください。 コンポジターは、ウィンドウをスクリーンに表示するときに仮想エフェクトを適用するUIコンポーネントです。 いくつかのデスクトップ環境ではコンポジターがウィンドウマネージャーに直接統合されており、 仮想エフェクトを切り替えたり無効にすることができます。 Regolithでは、コンポジターはパッケージングシステムで繋ぎ変え可能な“extension point”として定義されます。 これは、コンポジターを含むパッケージをインストールすることでコンポジターを切り替えることができるということを意味します。 基礎となるパッケージングシステムは競合が起きないことを確認し、 コンポジターを含めたすべての依存関係が インストールされていることを確認してください。
警告：Regolith 2.xでは、既定のコンポジターは&amp;quot;コンポジターなし&amp;quot;です。 Regolith 1.xでは、既定のコンポジターはPicomでした。 利用可能なコンポジターを探す # Regolithで動作するすべてのコンポジター設定は、 以下のコマンドで一覧表示されます：
apt search regolith-compositor- 以下の項目を見つけることができます：
regolith-compositor-none [既定]：コンポジターなし。 最高のパフォーマンス、仮想エフェクトなし。 regolith-compositor-picom-glx：picomを使用します。 画面のつなぎ目の解決や仮想エフェクトの追加するとき、多くのユーザーに推奨されます。comptonからフォークされ、モダンで管理されています。 Regolith 1.6の既定のコンポジターでした。 regolith-compositor-compton-glx：既にメンテナンスされていない、 picomの祖先です。 regolith-compositor-xcompmgr：初期のコンポジターで、より複雑なコンポジターに問題がある場合、 より安定したパフォーマンスを提供する可能性があります。 コンポジターのインストール # i3-wmでコンポジターを管理する方法により、コンポジターの変更をエフェクトに適用するため、 ログアウトしてから戻る必要があります。 i3の再起動では代替できません。 次のパッケージインストールコマンドを実行して、コンポジターを交換します。 picomをインストールする場合：
apt install regolith-compositor-picom 一度ログアウトして戻ってから新しいコンポジターを読み込みます。 プロセスのリストからpicomが動作していることを確認することができます：
ps aux | grep picom Regolithの既定のコンポジター設定のオーバーライド # Compton/Picom # 独自のCompton/Picomコンポジターの設定を提供するには、 既定値をコピーするか独自に用意し、~/.config/regolith3/picom/configに保存します。 次のセッションでは、既定の設定である/etc/regolith/picom/configの代わりに 読み込まれます。</description></item><item><title>Xresourcesのオーバーライド</title><link>https://regolith-desktop.com/ja/docs/howtos/override-xres/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://regolith-desktop.com/ja/docs/howtos/override-xres/</guid><description>Regolithは、Xresourcesシステムに依存し、統合されたインターフェース設定を提供しています。Xresourcesの値を変更することで、Regolithは、ユーザーインターフェイスの更新、カスタム動作の指定、バーの一部のblockletの特定の形式の定義などの方法でカスタマイズできます。
Regolithでは、Xresourcesの値は、独自のXresourcesファイルを用意する方法か、既存のXresourcesの値をオーバーライドする方法の2つの方法で変更できます。後者のアプローチは、Regolithが新しいバージョンにアップグレードする際にカスタマイズを妨げる可能性を下げるため、強く推奨されます。Xresourcesツリーを完全にコピーする場合、将来のバージョンで破損した変更を手動で統合する必要があります。 初期化 # Regolithセッションが開始されるとき、以下の順番でXresourcesが読み込まれます：
ファイル オプション 注意 ~/.Xresources Y Regolith以外の設定を対象にしています /usr/share/regolith-look/**/ N RegolithのXresourcesは外観と関連付けられています ~/.config/regolith3/Xresources Y 特定のオーバーライドをXresourcesの既定に適用します 冗長設定の指定を必要とせず、長期にわたって管理しやすいため、カスタマイズには~/.config/regolith3/Xresourcesを使用することを推奨します。
変更可能な値の決定 # xrdbツールは既存のXresourcesの値をリスト表示するときに使用することができます。Regolith 2.1リリースには、いくつか既存のオーバーライドが存在します：
$ xrdb -query [...] gnome.terminal.scrollbar: never gnome.terminal.use-transparent-background: true gtk.document_font_name: Sans 12 gtk.font_name: Bitstream Vera Sans 12 gtk.icon_theme_name: Papirus-Dark gtk.monospace_font_name: BitstreamVeraSansMono Nerd Font 13 gtk.theme_name: Ayu-Mirage-Dark wm.bar.background.color: #1F2430 [...] 参考例 # 以下のコマンドはファイルの最後にテキストを付け加えるため、コマンドを複数回実行すると、重複した入力が発生することに注意してください。</description></item><item><title>バーステータスインジケーターの変更</title><link>https://regolith-desktop.com/ja/docs/howtos/add-remove-blocklets/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://regolith-desktop.com/ja/docs/howtos/add-remove-blocklets/</guid><description>ステータスインジケーターの追加と削除 # ステータスインジケーターの検索 # $ apt search i3xrocks- ステータスインジケーターのインストール # $ sudo apt install i3xrocks-memory $ regolith-look refresh i3バーのカスタマイズ # バーにある各インジケーターはファイルで管理されます。バーのステータスインジケーターの位置に対応しています。例として、ファイル名が10_で始まるものは、 20_で始まる設定ファイルのインジケーターより前に配置されることを意味します。各ファイルの中には、i3xrocksがスクリプトを実行するために使用する情報があり、最終的にバーに表示されるデータを返します。いくつかのステータスインジケーターは設定パラメーターが存在し、ユーザーの好みに合わせることができます。例えば、バッテリーの状態を頻繁に変更するのがよい場合、調べる間隔を更新することができます。バーをカスタマイズするために最初にするべきことは、表示したいインジケーターを/usr/share/i3xrocks/conf.d/から~/.config/regolith3/i3xrocks/conf.dにコピーすることです。 ~/.config/regolith3/i3xrocks/conf.d内の各ファイルは好きなように変更できます。バーのステータスインジケーターを変更するには、ファイルの名前を好きな並び順に変更するだけです。
変更を加えたあとは、セッションを再読み込みすることで、新しい設定ファイルに基づいてバーが更新されるはずです。
例えば、バーにおけるバッテリーとトラフィックのブロックの変更と通知を非表示にしたいとき、以下の操作を行います。
$ ls /usr/share/i3xrocks/conf.d/ 01_setup 30_net-traffic 80_battery 80_rofication 90_time $ mkdir -p ~/.config/regolith3/i3xrocks/conf.d $ cp /usr/share/i3xrocks/conf.d/01_setup ~/.config/regolith3/i3xrocks/conf.d/01_setup $ cp /usr/share/i3xrocks/conf.d/80_battery ~/.config/regolith3/i3xrocks/conf.d/30_battery $ cp /usr/share/i3xrocks/conf.d/30_net-traffic ~/.config/regolith3/i3xrocks/conf.d/80_net-traffic $ regolith-look refresh 上記の操作では、以下の操作が実行されます。
Regolithが作成したディレクトリに存在する現在のi3xrocksモジュールが一覧表示されます ユーザー設定が存在するディレクトリに~/.config/regolith3/i3xrocks/conf.dが作成されます 3つのファイルが、アプリケーションが作成したディレクトリからユーザーが作成したディレクトリにコピーされます。これにより、この記事の冒頭で説明したようにユーザーがn_の番号を変更すると、順番が変更されます。 regolith-look refreshコマンドでバーステータスインジケーターの再読み込みが行われます 注意：ユーザーディレクトリの~/.config/regolith3/i3xrocks/conf.dに複数のブロック設定が存在する場合、既定である/usr/share/i3xrocks/conf.d/は無視されます。
さらに深く読み込む # 設定のリファレンスページには、Regolith Linuxを使うときの設定ファイルについての詳細な項目があります。</description></item><item><title>設定ファイルのステージ</title><link>https://regolith-desktop.com/ja/docs/howtos/stage-configs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://regolith-desktop.com/ja/docs/howtos/stage-configs/</guid><description>Xresources値を上書きしたり新しく用意したいのみであれば、設定のステージングは不必要であり推奨されません。Xresources値を上書きするには分割されたページをご覧ください。 Regolithでは様々なコンポーネントの動作や外観を決定するためにいくつもの設定ファイルを使用します。それらのファイルを直接簡単に編集することができると、あらゆるユーザーが機能アップデートを上書きする危険性のある設定を実行するでしょう。Debianのパッケージングシステムはユーザーに対し、アップデートを受けるか現在のファイルを維持するのかを訪ねますが、ユーザーがファイルの部分更新を受ける場合には意図しない影響が存在するかもしれません。Regolithは、ログイン後、ユーザーがステージした設定ファイルを探し出し、それらが存在する場合は 既定のファイルの代わりに読み込みます 。これは、ユーザーがファイルの設定をより詳細に管理できるため、ファイルを直接編集することよりも推奨されます。このページでは、これらのファイルの作成方法について解説します。
変更したい内容によっては、i3設定ファイルの場合は独自のコピーが必要になる場合があります。Regolithの外観を変更する方法を探している場合、Xresourcesですべて解決できます。キーバインドの更新や追加、コンポーネントの入れ替えなどは、i3設定ファイルをステージする必要があるでしょう。
i3設定 # 既定のRegolith i3設定ファイルをホームディレクトリにコピーする。 $ mkdir -p ~/.config/regolith3/i3 $ cp /etc/regolith/i3/config ~/.config/regolith3/i3/config ログアウトして戻る。Regolithセッションがユーザーがステージしたファイルを自動で認識して読み込むでしょう。 変更の確認 # i3 --moreversionを実行して確認し、結果として表示された設定ファイルに注視する。作成直後であればコピーすべきです。そうしない場合は、パスが正しいことを確認してください。正確であればRegolithが~/.config/regolith3/i3/configを読み込みます。</description></item></channel></rss>